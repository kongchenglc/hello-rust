// 每个引用都有自己的生命周期
// 生命周期：让引用保持有效的作用域
// 大多数情况生命周期时隐式可推断的
// 少数情况需要手动标注生命周期

// 生命周期的主要目的是防止悬垂引用（类似野指针？
pub fn start() {
  use_with_value()
}
fn use_with_value() {
  // {
  //   let r: i32;
  //   {
  //     let x = 2;
  //     r = &x; // (不合法
  //   }
  //   println!("{}", r);
  // }
}
